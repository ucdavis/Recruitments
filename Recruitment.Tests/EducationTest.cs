// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace Recruitment.Tests
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Education and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Education Unit Tests
    ///</summary>
    [TestClass()]
    public class EducationTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ApplicationStepType
        ///</summary>
        [TestMethod()]
        public void ApplicationStepTypeTest()
        {
            Education target = new Education();

            ApplicationStepType val = ApplicationStepType.CurrentPosition; // TODO: Assign to an appropriate value for the property

            target.ApplicationStepType = val;


            Assert.AreEqual(val, target.ApplicationStepType, "CAESDO.Recruitment.Core.Domain.Education.ApplicationStepType was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for AssociatedApplication
        ///</summary>
        [TestMethod()]
        public void AssociatedApplicationTest()
        {
            Education target = new Education();

            Application val = null; // TODO: Assign to an appropriate value for the property

            target.AssociatedApplication = val;


            Assert.AreEqual(val, target.AssociatedApplication, "CAESDO.Recruitment.Core.Domain.Education.AssociatedApplication was not set correc" +
                    "tly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Complete
        ///</summary>
        [TestMethod()]
        public void CompleteTest()
        {
            Education target = new Education();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.Complete = val;


            Assert.AreEqual(val, target.Complete, "CAESDO.Recruitment.Core.Domain.Education.Complete was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Date
        ///</summary>
        [TestMethod()]
        public void DateTest()
        {
            Education target = new Education();

            DateTime val = new DateTime(); // TODO: Assign to an appropriate value for the property

            target.Date = val;


            Assert.AreEqual(val, target.Date, "CAESDO.Recruitment.Core.Domain.Education.Date was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Discipline
        ///</summary>
        [TestMethod()]
        public void DisciplineTest()
        {
            Education target = new Education();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Discipline = val;


            Assert.AreEqual(val, target.Discipline, "CAESDO.Recruitment.Core.Domain.Education.Discipline was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Education ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Education target = new Education();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for Fill ()
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            Education target = new Education();

            target.Fill();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Institution
        ///</summary>
        [TestMethod()]
        public void InstitutionTest()
        {
            Education target = new Education();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Institution = val;


            Assert.AreEqual(val, target.Institution, "CAESDO.Recruitment.Core.Domain.Education.Institution was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for isComplete ()
        ///</summary>
        [TestMethod()]
        public void isCompleteTest()
        {
            Education target = new Education();

            bool expected = false;
            bool actual;

            actual = target.isComplete();

            Assert.AreEqual(expected, actual, "CAESDO.Recruitment.Core.Domain.Education.isComplete did not return the expected v" +
                    "alue.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            Education target = new Education();

            target.Save();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
