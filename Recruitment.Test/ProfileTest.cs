// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace Recruitment.Tests
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Profile and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Profile Unit Tests
    ///</summary>
    [TestClass()]
    public class ProfileTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Address1
        ///</summary>
        [TestMethod()]
        public void Address1Test()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Address1 = val;


            Assert.AreEqual(val, target.Address1, "CAESDO.Recruitment.Core.Domain.Profile.Address1 was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Address2
        ///</summary>
        [TestMethod()]
        public void Address2Test()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Address2 = val;


            Assert.AreEqual(val, target.Address2, "CAESDO.Recruitment.Core.Domain.Profile.Address2 was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Applications
        ///</summary>
        [TestMethod()]
        public void ApplicationsTest()
        {
            Profile target = new Profile();

            System.Collections.Generic.IList<CAESDO.Recruitment.Core.Domain.Application> val = null; // TODO: Assign to an appropriate value for the property

            target.Applications = val;


            Assert.AreEqual(val, target.Applications, "CAESDO.Recruitment.Core.Domain.Profile.Applications was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for AssociatedApplicant
        ///</summary>
        [TestMethod()]
        public void AssociatedApplicantTest()
        {
            Profile target = new Profile();

            Applicant val = null; // TODO: Assign to an appropriate value for the property

            target.AssociatedApplicant = val;


            Assert.AreEqual(val, target.AssociatedApplicant, "CAESDO.Recruitment.Core.Domain.Profile.AssociatedApplicant was not set correctly." +
                    "");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for City
        ///</summary>
        [TestMethod()]
        public void CityTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.City = val;


            Assert.AreEqual(val, target.City, "CAESDO.Recruitment.Core.Domain.Profile.City was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Country
        ///</summary>
        [TestMethod()]
        public void CountryTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Country = val;


            Assert.AreEqual(val, target.Country, "CAESDO.Recruitment.Core.Domain.Profile.Country was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Fill (int)
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            Profile target = new Profile();

            int ApplicantID = 0; // TODO: Initialize to an appropriate value

            target.Fill(ApplicantID);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for FirstName
        ///</summary>
        [TestMethod()]
        public void FirstNameTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.FirstName = val;


            Assert.AreEqual(val, target.FirstName, "CAESDO.Recruitment.Core.Domain.Profile.FirstName was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for LastName
        ///</summary>
        [TestMethod()]
        public void LastNameTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.LastName = val;


            Assert.AreEqual(val, target.LastName, "CAESDO.Recruitment.Core.Domain.Profile.LastName was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for MiddleName
        ///</summary>
        [TestMethod()]
        public void MiddleNameTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.MiddleName = val;


            Assert.AreEqual(val, target.MiddleName, "CAESDO.Recruitment.Core.Domain.Profile.MiddleName was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Phone
        ///</summary>
        [TestMethod()]
        public void PhoneTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Phone = val;


            Assert.AreEqual(val, target.Phone, "CAESDO.Recruitment.Core.Domain.Profile.Phone was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Profile ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Profile target = new Profile();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            Profile target = new Profile();

            target.Save();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for State
        ///</summary>
        [TestMethod()]
        public void StateTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.State = val;


            Assert.AreEqual(val, target.State, "CAESDO.Recruitment.Core.Domain.Profile.State was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Zip
        ///</summary>
        [TestMethod()]
        public void ZipTest()
        {
            Profile target = new Profile();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Zip = val;


            Assert.AreEqual(val, target.Zip, "CAESDO.Recruitment.Core.Domain.Profile.Zip was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
