// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace Recruitment.Tests
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Survey and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Survey Unit Tests
    ///</summary>
    [TestClass()]
    public class SurveyTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ApplicationStepType
        ///</summary>
        [TestMethod()]
        public void ApplicationStepTypeTest()
        {
            Survey target = new Survey();

            ApplicationStepType val = ApplicationStepType.CurrentPosition; // TODO: Assign to an appropriate value for the property

            target.ApplicationStepType = val;


            Assert.AreEqual(val, target.ApplicationStepType, "CAESDO.Recruitment.Core.Domain.Survey.ApplicationStepType was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for AssociatedApplication
        ///</summary>
        [TestMethod()]
        public void AssociatedApplicationTest()
        {
            Survey target = new Survey();

            Application val = null; // TODO: Assign to an appropriate value for the property

            target.AssociatedApplication = val;


            Assert.AreEqual(val, target.AssociatedApplication, "CAESDO.Recruitment.Core.Domain.Survey.AssociatedApplication was not set correctly" +
                    ".");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Complete
        ///</summary>
        [TestMethod()]
        public void CompleteTest()
        {
            Survey target = new Survey();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.Complete = val;


            Assert.AreEqual(val, target.Complete, "CAESDO.Recruitment.Core.Domain.Survey.Complete was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Ethnicity
        ///</summary>
        [TestMethod()]
        public void EthnicityTest()
        {
            Survey target = new Survey();

            Ethnicity val = null; // TODO: Assign to an appropriate value for the property

            target.Ethnicity = val;


            Assert.AreEqual(val, target.Ethnicity, "CAESDO.Recruitment.Core.Domain.Survey.Ethnicity was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Fill ()
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            Survey target = new Survey();

            target.Fill();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Gender
        ///</summary>
        [TestMethod()]
        public void GenderTest()
        {
            Survey target = new Survey();

            Gender val = null; // TODO: Assign to an appropriate value for the property

            target.Gender = val;


            Assert.AreEqual(val, target.Gender, "CAESDO.Recruitment.Core.Domain.Survey.Gender was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for isComplete ()
        ///</summary>
        [TestMethod()]
        public void isCompleteTest()
        {
            Survey target = new Survey();

            bool expected = false;
            bool actual;

            actual = target.isComplete();

            Assert.AreEqual(expected, actual, "CAESDO.Recruitment.Core.Domain.Survey.isComplete did not return the expected valu" +
                    "e.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Other
        ///</summary>
        [TestMethod()]
        public void OtherTest()
        {
            Survey target = new Survey();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Other = val;


            Assert.AreEqual(val, target.Other, "CAESDO.Recruitment.Core.Domain.Survey.Other was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Prof_Organization
        ///</summary>
        [TestMethod()]
        public void Prof_OrganizationTest()
        {
            Survey target = new Survey();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Prof_Organization = val;


            Assert.AreEqual(val, target.Prof_Organization, "CAESDO.Recruitment.Core.Domain.Survey.Prof_Organization was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Pub_Advertisement
        ///</summary>
        [TestMethod()]
        public void Pub_AdvertisementTest()
        {
            Survey target = new Survey();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Pub_Advertisement = val;


            Assert.AreEqual(val, target.Pub_Advertisement, "CAESDO.Recruitment.Core.Domain.Survey.Pub_Advertisement was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for RecruitmentSrc
        ///</summary>
        [TestMethod()]
        public void RecruitmentSrcTest()
        {
            Survey target = new Survey();

            RecruitmentSrc val = null; // TODO: Assign to an appropriate value for the property

            target.RecruitmentSrc = val;


            Assert.AreEqual(val, target.RecruitmentSrc, "CAESDO.Recruitment.Core.Domain.Survey.RecruitmentSrc was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            Survey target = new Survey();

            target.Save();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Survey ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Survey target = new Survey();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for TribalAffiliation
        ///</summary>
        [TestMethod()]
        public void TribalAffiliationTest()
        {
            Survey target = new Survey();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.TribalAffiliation = val;


            Assert.AreEqual(val, target.TribalAffiliation, "CAESDO.Recruitment.Core.Domain.Survey.TribalAffiliation was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
