// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using CAESDO.Recruitment.BLL;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
using CAESDO.Recruitment.Data;

namespace CAESDO.Recruitment.Test.DomainTests
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Applicant and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Applicant Unit Tests
    ///</summary>
    [TestClass()]
    public class ApplicantTest : DatabaseTestBase
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Applicant ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Applicant target = new Applicant();

            Assert.IsNotNull(target);
        }

        [TestMethod()]
        public void ValidateAllTest()
        {
            List<Applicant> applicants = NHibernateHelper.DaoFactory.GetApplicantDao().GetAll();

            Assert.IsFalse(applicants.Count == 0);

            foreach (Applicant app in applicants)
            {
                Assert.IsTrue(ValidateBO<Applicant>.isValid(app));

                this.TestContext.WriteLine("Applicant ID = {0}, Email = {1}", app.ID, app.Email); 
            }
        }

        [TestMethod]
        public void ProfilesTest()
        {
            Applicant target = NHibernateHelper.DaoFactory.GetApplicantDao().GetById(StaticProperties.ExistingApplicantID, false);

            Assert.AreNotEqual<int>(0, target.Profiles.Count);

            Assert.IsNotNull(target.MainProfile);
        }

        [TestMethod]
        public void UpdateEmail()
        {
            Applicant target = NHibernateHelper.DaoFactory.GetApplicantDao().GetById(StaticProperties.ExistingApplicantID, false);

            string originalEmail = target.Email;

            target.Email = StaticProperties.TestString;

            Assert.IsTrue(ValidateBO<Applicant>.isValid(target)); //make sure the target is valid before saving

            using (var ts = new TransactionScope())
            {
                target = NHibernateHelper.DaoFactory.GetApplicantDao().SaveOrUpdate(target);

                ts.CommitTransaction();
            }

            //Get the target back out of the database
            Applicant targetDB = NHibernateHelper.DaoFactory.GetApplicantDao().GetById(StaticProperties.ExistingApplicantID, false);

            //Make sure the email was changed
            Assert.AreEqual<string>(targetDB.Email, StaticProperties.TestString);

            //Change it back
            targetDB.Email = originalEmail;

            Assert.IsTrue(ValidateBO<Applicant>.isValid(targetDB)); //make sure the target is valid before saving

            using (var ts = new TransactionScope())
            {
                NHibernateHelper.DaoFactory.GetApplicantDao().SaveOrUpdate(targetDB);

                ts.CommitTransaction();
            }
        }
    }
}