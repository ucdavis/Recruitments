// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace CAESDO.Recruitment.Test
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.File and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.File Unit Tests
    ///</summary>
    [TestClass()]
    public class FileTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ConvertFile (byte[])
        ///</summary>
        [TestMethod()]
        public void ConvertFileTest()
        {
            File target = new File();

            byte[] FileToConvert = null; // TODO: Initialize to an appropriate value

            byte[] expected = null;
            byte[] actual;

            actual = target.ConvertFile(FileToConvert);

            CollectionAssert.AreEqual(expected, actual, "CAESDO.Recruitment.Core.Domain.File.ConvertFile did not return the expected value" +
                    ".");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Description
        ///</summary>
        [TestMethod()]
        public void DescriptionTest()
        {
            File target = new File();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Description = val;


            Assert.AreEqual(val, target.Description, "CAESDO.Recruitment.Core.Domain.File.Description was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for File ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            File target = new File();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for FileName
        ///</summary>
        [TestMethod()]
        public void FileNameTest()
        {
            File target = new File();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.FileName = val;


            Assert.AreEqual(val, target.FileName, "CAESDO.Recruitment.Core.Domain.File.FileName was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FileType
        ///</summary>
        [TestMethod()]
        public void FileTypeTest()
        {
            File target = new File();

            FileType val = null; // TODO: Assign to an appropriate value for the property

            target.FileType = val;


            Assert.AreEqual(val, target.FileType, "CAESDO.Recruitment.Core.Domain.File.FileType was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Fill ()
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            File target = new File();

            target.Fill();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for GetFileData ()
        ///</summary>
        [TestMethod()]
        public void GetFileDataTest()
        {
            File target = new File();

            byte[] expected = null;
            byte[] actual;

            actual = target.GetFileData();

            CollectionAssert.AreEqual(expected, actual, "CAESDO.Recruitment.Core.Domain.File.GetFileData did not return the expected value" +
                    ".");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Label
        ///</summary>
        [TestMethod()]
        public void LabelTest()
        {
            File target = new File();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Label = val;


            Assert.AreEqual(val, target.Label, "CAESDO.Recruitment.Core.Domain.File.Label was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            File target = new File();

            target.Save();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
