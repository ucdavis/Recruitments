// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace CAESDO.Recruitment.Test
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Applicant and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Applicant Unit Tests
    ///</summary>
    [TestClass()]
    public class ApplicantTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        static int ExistingApplicantID = 4;
        static string ExistingApplicantEmail = "srkirkland@ucdavis.edu";

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Applicant ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Applicant target = new Applicant();

            // TODO: Implement code to verify target
            //Assert.Inconclusive("TODO: Implement code to verify target");
            Assert.IsNotNull(target);
        }

        [TestMethod()]
        public void FillApplicant()
        {
            Applicant target = NHibernateHelper.daoFactory.GetApplicantDao().GetById(ExistingApplicantID, false);

            Assert.IsNotNull(target);

            Assert.AreEqual<int>(target.ID, ExistingApplicantID);
            Assert.AreEqual<string>(target.Email, ExistingApplicantEmail);
        }

        /// <summary>
        ///A test for Fill (int, bool)
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            Applicant target = new Applicant();

            int AccountID = 0; // TODO: Initialize to an appropriate value

            bool LoadProfile = false; // TODO: Initialize to an appropriate value

            target.Fill(AccountID, LoadProfile);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
