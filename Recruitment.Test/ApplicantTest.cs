// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace CAESDO.Recruitment.Test
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Applicant and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Applicant Unit Tests
    ///</summary>
    [TestClass()]
    public class ApplicantTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Applicant ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            Applicant target = new Applicant();

            Assert.IsNotNull(target);
        }

        [TestMethod()]
        public void ValidateAllTest()
        {
            List<Applicant> applicants = NHibernateHelper.daoFactory.GetApplicantDao().GetAll();

            Assert.IsFalse(applicants.Count == 0);

            foreach (Applicant app in applicants)
            {
                Assert.IsTrue(ValidateBO<Applicant>.isValid(app));

                this.TestContext.WriteLine("Applicant ID = {0}, Email = {1}", app.ID, app.Email); 
            }
        }

        [TestMethod()]
        public void SaveDeleteApplicant()
        {
            // --- Saving an applicant is not done through NHibernate ---
            //Applicant applicant = new Applicant();

            //applicant.CreatedBy = 1;
            //applicant.Email = StaticProperties.TestString;
            //applicant.IsActive = true;

            //Applicant savedApplicant = NHibernateHelper.daoFactory.GetApplicantDao().Save(applicant);

            //Assert.IsNotNull(savedApplicant); //Make sure an applicant comes back
            //Assert.AreNotEqual<int>(savedApplicant.ID, 0); //Make sure it has a real ID
            //Assert.IsNull(savedApplicant.MainProfile); //Shouldn't have a profile
            //Assert.AreEqual<int>(applicant.CreatedBy, 1);
            //Assert.AreEqual<string>(applicant.Email, StaticProperties.TestString);
            //Assert.AreEqual<bool>(applicant.IsActive, true);

            ////Now we know we have a saved applicant, so delete it
            //NHibernateHelper.daoFactory.GetApplicantDao().Delete(savedApplicant);

            //Applicant deletedApplicant = NHibernateHelper.daoFactory.GetApplicantDao().GetById(savedApplicant.ID, false);
        }

    }


}
