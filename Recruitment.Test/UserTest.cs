// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
namespace Recruitment.Tests
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.User and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.User Unit Tests
    ///</summary>
    [TestClass()]
    public class UserTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Fill ()
        ///</summary>
        [TestMethod()]
        public void FillTest()
        {
            User target = new User();

            target.Fill();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for FindUCDKerberosIDs (string)
        ///</summary>
        [TestMethod()]
        public void FindUCDKerberosIDsTest()
        {
            string NameToMatch = null; // TODO: Initialize to an appropriate value

            System.Collections.Generic.List<string> expected = null;
            System.Collections.Generic.List<string> actual;

            actual = CAESDO.Recruitment.Core.Domain.User.FindUCDKerberosIDs(NameToMatch);

            Assert.AreEqual(expected, actual, "CAESDO.Recruitment.Core.Domain.User.FindUCDKerberosIDs did not return the expecte" +
                    "d value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for LoginID
        ///</summary>
        [TestMethod()]
        public void LoginIDTest()
        {
            User target = new User();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.LoginID = val;


            Assert.AreEqual(val, target.LoginID, "CAESDO.Recruitment.Core.Domain.User.LoginID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            User target = new User();

            target.Save();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for UserID
        ///</summary>
        [TestMethod()]
        public void UserIDTest()
        {
            User target = new User();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.UserID = val;


            Assert.AreEqual(val, target.UserID, "CAESDO.Recruitment.Core.Domain.User.UserID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
