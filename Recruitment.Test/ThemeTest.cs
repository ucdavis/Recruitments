// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CAESDO.Recruitment.Core.Domain;
using CAESDO.Recruitment.Data;
namespace CAESDO.Recruitment.Test
{
    /// <summary>
    ///This is a test class for CAESDO.Recruitment.Core.Domain.Theme and is intended
    ///to contain all CAESDO.Recruitment.Core.Domain.Theme Unit Tests
    ///</summary>
    [TestClass()]
    public class ThemeTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        [TestMethod]
        public void SaveDeleteTest()
        {
            Theme target = new Theme();

            target.DepartmentFIS = StaticProperties.TestString;
            target.Name = StaticProperties.TestString;

            Assert.IsTrue(target.IsTransient());
            Assert.IsTrue(ValidateBO<Theme>.isValid(target));

            using (new NHibernateTransaction())
            {
                target = NHibernateHelper.daoFactory.GetThemeDao().SaveOrUpdate(target);
            }

            Assert.IsFalse(target.IsTransient());

            Theme targetDB = NHibernateHelper.daoFactory.GetThemeDao().GetById(target.ID, false);

            Assert.AreEqual<int>(target.ID, targetDB.ID);

            this.TestContext.WriteLine("Theme created had ID = {0}", target.ID);

            using (new NHibernateTransaction())
            {
                NHibernateHelper.daoFactory.GetThemeDao().Delete(target);
            }

            //Make sure it is deleted
            bool isDeleted = false;

            try
            {
                targetDB = NHibernateHelper.daoFactory.GetThemeDao().GetById(target.ID, false);
                targetDB.IsTransient(); //check to see if its in the db
            }
            catch (NHibernate.ObjectNotFoundException)
            {
                isDeleted = true;
            }

            Assert.IsTrue(isDeleted);
        }
    }


}
